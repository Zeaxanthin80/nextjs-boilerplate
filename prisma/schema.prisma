// Marketing SaaS Database Schema
// Generated for Jose, Norma, and Lily's capstone project

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account Management (Add this model)
model Account {
  id        String   @id @default(cuid())
  name      String
  plan      PlanType @default(FREE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ownerId   String
  owner     User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  campaigns Campaign[]

  @@map("accounts")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?  // Add password field
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts    Account[]  // ✅ Now this works!
  campaigns   Campaign[]
  
  // NextAuth.js relations
  authAccounts AuthAccount[]
  sessions     Session[]
  
  @@map("users")
}

// NextAuth.js required models
model AuthAccount {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("auth_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Campaign Management
model Campaign {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      CampaignStatus @default(DRAFT)
  budget      Float?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  accountId   String
  creatorId   String
  account     Account @relation(fields: [accountId], references: [id], onDelete: Cascade) // ✅ Now this works!
  creator     User    @relation(fields: [creatorId], references: [id])
  analytics   Analytics[]
  
  @@map("campaigns")
}

// Analytics
model Analytics {
  id         String   @id @default(cuid())
  campaignId String
  date       DateTime @default(now())
  
  // Metrics
  impressions Int @default(0)
  clicks      Int @default(0)
  conversions Int @default(0)
  cost        Float @default(0)
  
  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@map("analytics")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum PlanType {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}
