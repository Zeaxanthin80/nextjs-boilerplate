// AI Campaign Generator Database Schema
// Updated for social media campaign generation

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Authentication Models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts  Account[]
  sessions  Session[]
  campaigns Campaign[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Campaign Management Models
model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      CampaignStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Campaign Input Data
  product     String
  audience    String
  tone        CampaignTone
  goals       String[]
  
  // Generated Content
  content     CampaignContent[]
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("campaigns")
}

model CampaignContent {
  id          String   @id @default(cuid())
  platform    Platform
  contentType ContentType
  title       String?
  content     String   @db.Text
  hashtags    String[]
  callToAction String?
  imageUrl    String?  // Add image URL field for DALL-E generated images
  createdAt   DateTime @default(now())
  
  // Relations
  campaignId  String
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@map("campaign_content")
}

enum CampaignStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CampaignTone {
  PROFESSIONAL
  CASUAL
  HUMOROUS
  INSPIRATIONAL
  EDUCATIONAL
  URGENT
}

enum Platform {
  TIKTOK
  INSTAGRAM
  FACEBOOK
  YOUTUBE
}

enum ContentType {
  POST
  STORY
  REEL
  VIDEO
  CAROUSEL
}
